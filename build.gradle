buildscript {
    ext.kotlin_stdlib = '1.6.10'
    ext.kotlin_coroutines = '1.6.0'

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_stdlib"
    }
}

apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'

group 'me.devoxin'
version '3.0.0'
sourceCompatibility = 1.8

repositories {
    maven {
        url 'https://m2.dv8tion.net/releases'
        name 'm2-dv8tion'
    }
    mavenCentral()
    jcenter()
}

dependencies {
    testImplementation 'net.dv8tion:JDA:5.0.0-alpha.9'

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_stdlib"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_stdlib"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlin_coroutines"

    compile 'org.reflections:reflections:0.10.2'
    compileOnly 'net.dv8tion:JDA:5.0.0-alpha.9'
    api 'org.slf4j:slf4j-api:1.7.36'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

String getBuildVersion() {
    def gitVersion = new ByteArrayOutputStream()
    exec {
        commandLine("git", "rev-parse", "--short", "HEAD")
        standardOutput = gitVersion
    }
    return "$version\n${gitVersion.toString().trim()}"
}

task writeVersion() {
    def resourcePath = sourceSets.main.resources.srcDirs[0]
    def resources = file(resourcePath)

    if (!resources.exists()) {
        resources.mkdirs()
    }

    file("$resourcePath/flight.txt").text = getBuildVersion()
}

build {
    dependsOn writeVersion
}
